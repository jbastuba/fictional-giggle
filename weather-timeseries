{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UdgeoNXLXUdM"
      },
      "source": [
        "# Time Series Forecasting with RNNs\n",
        "\n",
        "We will use ETTh1 dataset which records the oil temperature for a transformer every hour for two years. Our goal here is to predict oil temperature 96 hours into the future."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HjnlH7LhW4uJ"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import datetime\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras import regularizers\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from statsmodels.tsa.seasonal import seasonal_decompose"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wvADeoIXcqA",
        "outputId": "5a01d2d3-1214-43ac-924f-32dec5ff5c99"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "axJ7AGpJY-tN",
        "outputId": "7754f3de-0c5a-4db9-f7d8-7c87a09238ea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/MyDrive\n"
          ]
        }
      ],
      "source": [
        "cd /content/drive/MyDrive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CcT4-XMqYxCz"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv('ETTh1.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "O1mp-1JcXfQB"
      },
      "source": [
        "## 1. Inspecting data"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "t-XFYGL_JvoM",
        "outputId": "4305bfd3-3a02-4e27-b3d0-2fb50602d389"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  date   HUFL   HULL   MUFL   MULL   LUFL   LULL         OT\n",
              "0  2016-07-01 00:00:00  5.827  2.009  1.599  0.462  4.203  1.340  30.531000\n",
              "1  2016-07-01 01:00:00  5.693  2.076  1.492  0.426  4.142  1.371  27.787001\n",
              "2  2016-07-01 02:00:00  5.157  1.741  1.279  0.355  3.777  1.218  27.787001\n",
              "3  2016-07-01 03:00:00  5.090  1.942  1.279  0.391  3.807  1.279  25.044001\n",
              "4  2016-07-01 04:00:00  5.358  1.942  1.492  0.462  3.868  1.279  21.948000\n",
              "5  2016-07-01 05:00:00  5.626  2.143  1.528  0.533  4.051  1.371  21.174000\n",
              "6  2016-07-01 06:00:00  7.167  2.947  2.132  0.782  5.026  1.858  22.792000\n",
              "7  2016-07-01 07:00:00  7.435  3.282  2.310  1.031  5.087  2.224  23.143999\n",
              "8  2016-07-01 08:00:00  5.559  3.014  2.452  1.173  2.955  1.432  21.667000\n",
              "9  2016-07-01 09:00:00  4.555  2.545  1.919  0.817  2.680  1.371  17.445999"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c44103ec-fb05-4e5e-8a8b-74453cd5adf9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2016-07-01 00:00:00</td>\n",
              "      <td>5.827</td>\n",
              "      <td>2.009</td>\n",
              "      <td>1.599</td>\n",
              "      <td>0.462</td>\n",
              "      <td>4.203</td>\n",
              "      <td>1.340</td>\n",
              "      <td>30.531000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2016-07-01 01:00:00</td>\n",
              "      <td>5.693</td>\n",
              "      <td>2.076</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.426</td>\n",
              "      <td>4.142</td>\n",
              "      <td>1.371</td>\n",
              "      <td>27.787001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2016-07-01 02:00:00</td>\n",
              "      <td>5.157</td>\n",
              "      <td>1.741</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.355</td>\n",
              "      <td>3.777</td>\n",
              "      <td>1.218</td>\n",
              "      <td>27.787001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2016-07-01 03:00:00</td>\n",
              "      <td>5.090</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.391</td>\n",
              "      <td>3.807</td>\n",
              "      <td>1.279</td>\n",
              "      <td>25.044001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2016-07-01 04:00:00</td>\n",
              "      <td>5.358</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.462</td>\n",
              "      <td>3.868</td>\n",
              "      <td>1.279</td>\n",
              "      <td>21.948000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2016-07-01 05:00:00</td>\n",
              "      <td>5.626</td>\n",
              "      <td>2.143</td>\n",
              "      <td>1.528</td>\n",
              "      <td>0.533</td>\n",
              "      <td>4.051</td>\n",
              "      <td>1.371</td>\n",
              "      <td>21.174000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2016-07-01 06:00:00</td>\n",
              "      <td>7.167</td>\n",
              "      <td>2.947</td>\n",
              "      <td>2.132</td>\n",
              "      <td>0.782</td>\n",
              "      <td>5.026</td>\n",
              "      <td>1.858</td>\n",
              "      <td>22.792000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2016-07-01 07:00:00</td>\n",
              "      <td>7.435</td>\n",
              "      <td>3.282</td>\n",
              "      <td>2.310</td>\n",
              "      <td>1.031</td>\n",
              "      <td>5.087</td>\n",
              "      <td>2.224</td>\n",
              "      <td>23.143999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2016-07-01 08:00:00</td>\n",
              "      <td>5.559</td>\n",
              "      <td>3.014</td>\n",
              "      <td>2.452</td>\n",
              "      <td>1.173</td>\n",
              "      <td>2.955</td>\n",
              "      <td>1.432</td>\n",
              "      <td>21.667000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2016-07-01 09:00:00</td>\n",
              "      <td>4.555</td>\n",
              "      <td>2.545</td>\n",
              "      <td>1.919</td>\n",
              "      <td>0.817</td>\n",
              "      <td>2.680</td>\n",
              "      <td>1.371</td>\n",
              "      <td>17.445999</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c44103ec-fb05-4e5e-8a8b-74453cd5adf9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c44103ec-fb05-4e5e-8a8b-74453cd5adf9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c44103ec-fb05-4e5e-8a8b-74453cd5adf9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-487f618c-a3ae-4b8a-83b4-28dd6151cabf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-487f618c-a3ae-4b8a-83b4-28dd6151cabf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-487f618c-a3ae-4b8a-83b4-28dd6151cabf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17420,\n  \"fields\": [\n    {\n      \"column\": \"date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 17420,\n        \"samples\": [\n          \"2017-11-26 20:00:00\",\n          \"2016-07-01 19:00:00\",\n          \"2016-09-10 06:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.067743958957745,\n        \"min\": -22.70599937438965,\n        \"max\": 23.643999099731445,\n        \"num_unique_values\": 613,\n        \"samples\": [\n          -8.23900032043457,\n          9.041999816894531,\n          7.099999904632568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.042342307036328,\n        \"min\": -4.75600004196167,\n        \"max\": 10.11400032043457,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          0.6029999852180481,\n          3.2149999141693115,\n          5.090000152587892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.826978212457667,\n        \"min\": -25.08799934387207,\n        \"max\": 17.340999603271484,\n        \"num_unique_values\": 1031,\n        \"samples\": [\n          6.928999900817871,\n          10.838000297546388,\n          8.635000228881836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8092934715308207,\n        \"min\": -5.934000015258789,\n        \"max\": 7.747000217437744,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          -1.4919999837875366,\n          2.203000068664551,\n          -2.45199990272522\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1645059523875725,\n        \"min\": -1.187999963760376,\n        \"max\": 8.498000144958496,\n        \"num_unique_values\": 236,\n        \"samples\": [\n          5.6040000915527335,\n          1.4320000410079956,\n          6.335000038146973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5995518293119606,\n        \"min\": -1.371000051498413,\n        \"max\": 3.0460000038146973,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          -0.3350000083446503,\n          1.9490000009536743,\n          -0.0299999993294477\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.566946318051215,\n        \"min\": -4.079999923706056,\n        \"max\": 46.00699996948242,\n        \"num_unique_values\": 669,\n        \"samples\": [\n          18.92300033569336,\n          36.018001556396484,\n          11.1850004196167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "hIhrf1fyJ3vT",
        "outputId": "7c89fc48-31dd-44bc-cf0a-9208cd0b55f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               HUFL          HULL          MUFL          MULL          LUFL  \\\n",
              "count  17420.000000  17420.000000  17420.000000  17420.000000  17420.000000   \n",
              "mean       7.375141      2.242242      4.300239      0.881568      3.066062   \n",
              "std        7.067744      2.042342      6.826978      1.809293      1.164506   \n",
              "min      -22.705999     -4.756000    -25.087999     -5.934000     -1.188000   \n",
              "25%        5.827000      0.737000      3.296000     -0.284000      2.315000   \n",
              "50%        8.774000      2.210000      5.970000      0.959000      2.833000   \n",
              "75%       11.788000      3.684000      8.635000      2.203000      3.625000   \n",
              "max       23.643999     10.114000     17.341000      7.747000      8.498000   \n",
              "\n",
              "               LULL            OT  \n",
              "count  17420.000000  17420.000000  \n",
              "mean       0.856932     13.324672  \n",
              "std        0.599552      8.566946  \n",
              "min       -1.371000     -4.080000  \n",
              "25%        0.670000      6.964000  \n",
              "50%        0.975000     11.396000  \n",
              "75%        1.218000     18.079000  \n",
              "max        3.046000     46.007000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8f1df568-ca8a-478e-be4f-1fc46d6c45c5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "      <td>17420.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.375141</td>\n",
              "      <td>2.242242</td>\n",
              "      <td>4.300239</td>\n",
              "      <td>0.881568</td>\n",
              "      <td>3.066062</td>\n",
              "      <td>0.856932</td>\n",
              "      <td>13.324672</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7.067744</td>\n",
              "      <td>2.042342</td>\n",
              "      <td>6.826978</td>\n",
              "      <td>1.809293</td>\n",
              "      <td>1.164506</td>\n",
              "      <td>0.599552</td>\n",
              "      <td>8.566946</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-22.705999</td>\n",
              "      <td>-4.756000</td>\n",
              "      <td>-25.087999</td>\n",
              "      <td>-5.934000</td>\n",
              "      <td>-1.188000</td>\n",
              "      <td>-1.371000</td>\n",
              "      <td>-4.080000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.827000</td>\n",
              "      <td>0.737000</td>\n",
              "      <td>3.296000</td>\n",
              "      <td>-0.284000</td>\n",
              "      <td>2.315000</td>\n",
              "      <td>0.670000</td>\n",
              "      <td>6.964000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>8.774000</td>\n",
              "      <td>2.210000</td>\n",
              "      <td>5.970000</td>\n",
              "      <td>0.959000</td>\n",
              "      <td>2.833000</td>\n",
              "      <td>0.975000</td>\n",
              "      <td>11.396000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>11.788000</td>\n",
              "      <td>3.684000</td>\n",
              "      <td>8.635000</td>\n",
              "      <td>2.203000</td>\n",
              "      <td>3.625000</td>\n",
              "      <td>1.218000</td>\n",
              "      <td>18.079000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>23.643999</td>\n",
              "      <td>10.114000</td>\n",
              "      <td>17.341000</td>\n",
              "      <td>7.747000</td>\n",
              "      <td>8.498000</td>\n",
              "      <td>3.046000</td>\n",
              "      <td>46.007000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8f1df568-ca8a-478e-be4f-1fc46d6c45c5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8f1df568-ca8a-478e-be4f-1fc46d6c45c5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8f1df568-ca8a-478e-be4f-1fc46d6c45c5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-34802f3b-9b3c-448b-ba66-1b72a22a3af1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-34802f3b-9b3c-448b-ba66-1b72a22a3af1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-34802f3b-9b3c-448b-ba66-1b72a22a3af1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6156.804051492209,\n        \"min\": -22.70599937438965,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.375141332557705,\n          8.77400016784668,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6158.079461092356,\n        \"min\": -4.75600004196167,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          2.2422424215417096,\n          2.2100000381469727,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6157.837398346271,\n        \"min\": -25.08799934387207,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.300239086766587,\n          5.96999979019165,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6158.528352901736,\n        \"min\": -5.934000015258789,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.8815677387633465,\n          0.9589999914169312,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6157.874676734152,\n        \"min\": -1.187999963760376,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          3.0660619981835002,\n          2.8329999446868896,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6158.597412966175,\n        \"min\": -1.371000051498413,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.856932145499343,\n          0.975000023841858,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6153.853160751854,\n        \"min\": -4.079999923706056,\n        \"max\": 17420.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.324671589881694,\n          11.395999908447266,\n          17420.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3krg-li2T7Ej",
        "outputId": "84855e0f-3f5d-4abf-c31e-383909efd02a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 17420 entries, 0 to 17419\n",
            "Data columns (total 8 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   date    17420 non-null  object \n",
            " 1   HUFL    17420 non-null  float64\n",
            " 2   HULL    17420 non-null  float64\n",
            " 3   MUFL    17420 non-null  float64\n",
            " 4   MULL    17420 non-null  float64\n",
            " 5   LUFL    17420 non-null  float64\n",
            " 6   LULL    17420 non-null  float64\n",
            " 7   OT      17420 non-null  float64\n",
            "dtypes: float64(7), object(1)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(df['OT'], label='OT')\n",
        "plt.title('OT')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "XqifNYYvRafn",
        "outputId": "2e51ebde-80aa-4cc3-8b32-5f4897e79877"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The amplitude of the cycles remains relatively constant, thus this feature may be additive."
      ],
      "metadata": {
        "id": "ITyn1kQ9ST8R"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Take a peek at the first 90 days of data just for another means of inspection\n",
        "ot = df['OT']\n",
        "plt.xticks(np.arange(0, 90*24, 24), rotation=45)\n",
        "plt.plot(range(90*24), ot[:90*24])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 469
        },
        "id": "-Cvljf1ucAs7",
        "outputId": "c6a1b7dd-8cbe-4771-d563-051f94e89b47"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7db657726950>]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There does not appear to be an obvious trend but the daily flucuations do appear to be consistent and in this period of time there was a general increase, followed by a general decrease in oil temperature."
      ],
      "metadata": {
        "id": "_OkuDF4cdcQq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "result = seasonal_decompose(df['OT'], model='additive', period=1)\n",
        "result.plot()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "LhhNE3a1SFE2",
        "outputId": "d900e19d-3d13-4b8f-822d-a5d73f04c7c5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Per the seasonal decomposition using statsmodel, the entire series was taken as the trend component and there was no seasonality."
      ],
      "metadata": {
        "id": "_uiWDXJ1Y2Jk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Feature Engineering\n",
        "\n",
        "There was no periodicity per the previous inspection, so the feature 'date' will be removed."
      ],
      "metadata": {
        "id": "sMzMMcPwZOle"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.sort_values(by='date')\n",
        "df = df.drop([\"date\"], axis=1)"
      ],
      "metadata": {
        "id": "xRS4Mz1AavT7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Sq9OQ3pfbGYQ",
        "outputId": "c1109105-5d87-4577-e714-26b69bed38c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    HUFL   HULL   MUFL   MULL   LUFL   LULL         OT\n",
              "0  5.827  2.009  1.599  0.462  4.203  1.340  30.531000\n",
              "1  5.693  2.076  1.492  0.426  4.142  1.371  27.787001\n",
              "2  5.157  1.741  1.279  0.355  3.777  1.218  27.787001\n",
              "3  5.090  1.942  1.279  0.391  3.807  1.279  25.044001\n",
              "4  5.358  1.942  1.492  0.462  3.868  1.279  21.948000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-12e96005-ee64-4e1a-ac6a-a53c103b2ada\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.827</td>\n",
              "      <td>2.009</td>\n",
              "      <td>1.599</td>\n",
              "      <td>0.462</td>\n",
              "      <td>4.203</td>\n",
              "      <td>1.340</td>\n",
              "      <td>30.531000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.693</td>\n",
              "      <td>2.076</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.426</td>\n",
              "      <td>4.142</td>\n",
              "      <td>1.371</td>\n",
              "      <td>27.787001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.157</td>\n",
              "      <td>1.741</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.355</td>\n",
              "      <td>3.777</td>\n",
              "      <td>1.218</td>\n",
              "      <td>27.787001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.090</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.391</td>\n",
              "      <td>3.807</td>\n",
              "      <td>1.279</td>\n",
              "      <td>25.044001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.358</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.462</td>\n",
              "      <td>3.868</td>\n",
              "      <td>1.279</td>\n",
              "      <td>21.948000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12e96005-ee64-4e1a-ac6a-a53c103b2ada')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-12e96005-ee64-4e1a-ac6a-a53c103b2ada button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-12e96005-ee64-4e1a-ac6a-a53c103b2ada');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-17874f4e-1ae5-4b4e-9fab-b036dac5189c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-17874f4e-1ae5-4b4e-9fab-b036dac5189c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-17874f4e-1ae5-4b4e-9fab-b036dac5189c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17420,\n  \"fields\": [\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.067743958957745,\n        \"min\": -22.70599937438965,\n        \"max\": 23.643999099731445,\n        \"num_unique_values\": 613,\n        \"samples\": [\n          -8.23900032043457,\n          9.041999816894531,\n          7.099999904632568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.042342307036328,\n        \"min\": -4.75600004196167,\n        \"max\": 10.11400032043457,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          0.6029999852180481,\n          3.2149999141693115,\n          5.090000152587892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.826978212457667,\n        \"min\": -25.08799934387207,\n        \"max\": 17.340999603271484,\n        \"num_unique_values\": 1031,\n        \"samples\": [\n          6.928999900817871,\n          10.838000297546388,\n          8.635000228881836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8092934715308207,\n        \"min\": -5.934000015258789,\n        \"max\": 7.747000217437744,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          -1.4919999837875366,\n          2.203000068664551,\n          -2.45199990272522\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1645059523875725,\n        \"min\": -1.187999963760376,\n        \"max\": 8.498000144958496,\n        \"num_unique_values\": 236,\n        \"samples\": [\n          5.6040000915527335,\n          1.4320000410079956,\n          6.335000038146973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5995518293119606,\n        \"min\": -1.371000051498413,\n        \"max\": 3.0460000038146973,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          -0.3350000083446503,\n          1.9490000009536743,\n          -0.0299999993294477\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.566946318051215,\n        \"min\": -4.079999923706056,\n        \"max\": 46.00699996948242,\n        \"num_unique_values\": 669,\n        \"samples\": [\n          18.92300033569336,\n          36.018001556396484,\n          11.1850004196167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Making the time series STATIONARY (step 6)\n",
        "df['OT'] = df['OT'].diff().fillna(0)"
      ],
      "metadata": {
        "id": "q9EMyOVe8ZVN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "jzxncSlF9Bbt",
        "outputId": "1613542e-7bd6-47e4-ebf2-ad53a3161755"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    HUFL   HULL   MUFL   MULL   LUFL   LULL        OT\n",
              "0  5.827  2.009  1.599  0.462  4.203  1.340  0.000000\n",
              "1  5.693  2.076  1.492  0.426  4.142  1.371 -2.743999\n",
              "2  5.157  1.741  1.279  0.355  3.777  1.218  0.000000\n",
              "3  5.090  1.942  1.279  0.391  3.807  1.279 -2.743000\n",
              "4  5.358  1.942  1.492  0.462  3.868  1.279 -3.096001"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f7c89ecf-f532-4e50-97e8-b6f92b4c0ab0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5.827</td>\n",
              "      <td>2.009</td>\n",
              "      <td>1.599</td>\n",
              "      <td>0.462</td>\n",
              "      <td>4.203</td>\n",
              "      <td>1.340</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.693</td>\n",
              "      <td>2.076</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.426</td>\n",
              "      <td>4.142</td>\n",
              "      <td>1.371</td>\n",
              "      <td>-2.743999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.157</td>\n",
              "      <td>1.741</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.355</td>\n",
              "      <td>3.777</td>\n",
              "      <td>1.218</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.090</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.391</td>\n",
              "      <td>3.807</td>\n",
              "      <td>1.279</td>\n",
              "      <td>-2.743000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.358</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.462</td>\n",
              "      <td>3.868</td>\n",
              "      <td>1.279</td>\n",
              "      <td>-3.096001</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f7c89ecf-f532-4e50-97e8-b6f92b4c0ab0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f7c89ecf-f532-4e50-97e8-b6f92b4c0ab0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f7c89ecf-f532-4e50-97e8-b6f92b4c0ab0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6b73f2c5-1db5-4f2c-a643-822568331d1e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6b73f2c5-1db5-4f2c-a643-822568331d1e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6b73f2c5-1db5-4f2c-a643-822568331d1e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17420,\n  \"fields\": [\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.067743958957745,\n        \"min\": -22.70599937438965,\n        \"max\": 23.643999099731445,\n        \"num_unique_values\": 613,\n        \"samples\": [\n          -8.23900032043457,\n          9.041999816894531,\n          7.099999904632568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.042342307036328,\n        \"min\": -4.75600004196167,\n        \"max\": 10.11400032043457,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          0.6029999852180481,\n          3.2149999141693115,\n          5.090000152587892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.826978212457667,\n        \"min\": -25.08799934387207,\n        \"max\": 17.340999603271484,\n        \"num_unique_values\": 1031,\n        \"samples\": [\n          6.928999900817871,\n          10.838000297546388,\n          8.635000228881836\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8092934715308207,\n        \"min\": -5.934000015258789,\n        \"max\": 7.747000217437744,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          -1.4919999837875366,\n          2.203000068664551,\n          -2.45199990272522\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1645059523875725,\n        \"min\": -1.187999963760376,\n        \"max\": 8.498000144958496,\n        \"num_unique_values\": 236,\n        \"samples\": [\n          5.6040000915527335,\n          1.4320000410079956,\n          6.335000038146973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5995518293119606,\n        \"min\": -1.371000051498413,\n        \"max\": 3.0460000038146973,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          -0.3350000083446503,\n          1.9490000009536743,\n          -0.0299999993294477\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9181849189550176,\n        \"min\": -9.919000625610352,\n        \"max\": 7.949001312255863,\n        \"num_unique_values\": 2846,\n        \"samples\": [\n          0.7730002403259286,\n          -4.642997741699226,\n          1.899000167846678\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drop the first row where differencing cannot be calculated\n",
        "df = df.drop(index=0)\n",
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "4yBjvwiq9H0A",
        "outputId": "efa924e3-4963-46d2-ac68-8aceafb304a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    HUFL   HULL   MUFL   MULL   LUFL   LULL        OT\n",
              "1  5.693  2.076  1.492  0.426  4.142  1.371 -2.743999\n",
              "2  5.157  1.741  1.279  0.355  3.777  1.218  0.000000\n",
              "3  5.090  1.942  1.279  0.391  3.807  1.279 -2.743000\n",
              "4  5.358  1.942  1.492  0.462  3.868  1.279 -3.096001\n",
              "5  5.626  2.143  1.528  0.533  4.051  1.371 -0.774000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20eefac8-9969-4e99-a579-ab4e36c39c63\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5.693</td>\n",
              "      <td>2.076</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.426</td>\n",
              "      <td>4.142</td>\n",
              "      <td>1.371</td>\n",
              "      <td>-2.743999</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5.157</td>\n",
              "      <td>1.741</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.355</td>\n",
              "      <td>3.777</td>\n",
              "      <td>1.218</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5.090</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.279</td>\n",
              "      <td>0.391</td>\n",
              "      <td>3.807</td>\n",
              "      <td>1.279</td>\n",
              "      <td>-2.743000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5.358</td>\n",
              "      <td>1.942</td>\n",
              "      <td>1.492</td>\n",
              "      <td>0.462</td>\n",
              "      <td>3.868</td>\n",
              "      <td>1.279</td>\n",
              "      <td>-3.096001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5.626</td>\n",
              "      <td>2.143</td>\n",
              "      <td>1.528</td>\n",
              "      <td>0.533</td>\n",
              "      <td>4.051</td>\n",
              "      <td>1.371</td>\n",
              "      <td>-0.774000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20eefac8-9969-4e99-a579-ab4e36c39c63')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20eefac8-9969-4e99-a579-ab4e36c39c63 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20eefac8-9969-4e99-a579-ab4e36c39c63');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ceac2a2d-1b01-4e86-b809-e2702b19843e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ceac2a2d-1b01-4e86-b809-e2702b19843e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ceac2a2d-1b01-4e86-b809-e2702b19843e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17419,\n  \"fields\": [\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.067937107504174,\n        \"min\": -22.70599937438965,\n        \"max\": 23.643999099731445,\n        \"num_unique_values\": 613,\n        \"samples\": [\n          -8.23900032043457,\n          8.23900032043457,\n          8.439000129699707\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.042400168879407,\n        \"min\": -4.75600004196167,\n        \"max\": 10.11400032043457,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          0.6029999852180481,\n          4.956999778747559,\n          5.357999801635742\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.827143502515453,\n        \"min\": -25.08799934387207,\n        \"max\": 17.340999603271484,\n        \"num_unique_values\": 1031,\n        \"samples\": [\n          6.573999881744385,\n          10.87399959564209,\n          13.112000465393065\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.8093426151926435,\n        \"min\": -5.934000015258789,\n        \"max\": 7.747000217437744,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          -1.4919999837875366,\n          2.203000068664551,\n          -2.45199990272522\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1645075145466661,\n        \"min\": -1.187999963760376,\n        \"max\": 8.498000144958496,\n        \"num_unique_values\": 236,\n        \"samples\": [\n          5.6040000915527335,\n          1.4320000410079956,\n          6.335000038146973\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5995578665548743,\n        \"min\": -1.371000051498413,\n        \"max\": 3.0460000038146973,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          -0.3350000083446503,\n          1.888000011444092,\n          -0.0299999993294477\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9182112758893379,\n        \"min\": -9.919000625610352,\n        \"max\": 7.949001312255863,\n        \"num_unique_values\": 2846,\n        \"samples\": [\n          0.7730002403259286,\n          -4.642997741699226,\n          1.899000167846678\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Split, Normalize, & Create Time Series Data"
      ],
      "metadata": {
        "id": "DrSFLODsbOsJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Split the data"
      ],
      "metadata": {
        "id": "pSbqERmwfViw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = len(df)\n",
        "\n",
        "#Use the first 12 months (12*30*24) for training\n",
        "num_train_samples = 12 * 30 * 24\n",
        "\n",
        "#Use the next 6 months (6*30*24) for validation\n",
        "num_val_samples = 6 * 30 * 24\n",
        "\n",
        "#Use the remainder for test\n",
        "num_test_samples = n - num_train_samples - num_val_samples\n",
        "\n",
        "print(\"number of train samples\", num_train_samples)\n",
        "print(\"validation shape\", num_val_samples)\n",
        "print(\"test shape\", num_test_samples)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XwbpKVsNbVpZ",
        "outputId": "adfbb490-7b85-43af-cbee-d3e0ddad3b9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "number of train samples 8640\n",
            "validation shape 4320\n",
            "test shape 4459\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Normalize"
      ],
      "metadata": {
        "id": "DDyV8DamfQm7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#normalize the data based on the training dataset's mean and standard deviation\n",
        "train_mean = df[:num_train_samples].mean(axis=0)\n",
        "train_std = df[:num_train_samples].std(axis=0)\n",
        "df = (df - train_mean) / train_std\n",
        "\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fk9lGhuvd9o-",
        "outputId": "4f3f31b1-c889-43df-d2c6-54eac537f6fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       HUFL      HULL      MUFL      MULL      LUFL      LULL        OT\n",
              "1 -0.386251  0.026306 -0.650202 -0.166297  1.329220  0.924419 -2.564865\n",
              "2 -0.478456 -0.133964 -0.688795 -0.203151  0.972589  0.681722  0.001036\n",
              "3 -0.489981 -0.037802 -0.688795 -0.184464  1.001901  0.778483 -2.563930\n",
              "4 -0.443879 -0.037802 -0.650202 -0.147611  1.061502  0.778483 -2.894019\n",
              "5 -0.397776  0.058359 -0.643679 -0.110757  1.240306  0.924419 -0.722728"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc7b7dfd-172f-4e21-b404-92d06ec39f63\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>HUFL</th>\n",
              "      <th>HULL</th>\n",
              "      <th>MUFL</th>\n",
              "      <th>MULL</th>\n",
              "      <th>LUFL</th>\n",
              "      <th>LULL</th>\n",
              "      <th>OT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.386251</td>\n",
              "      <td>0.026306</td>\n",
              "      <td>-0.650202</td>\n",
              "      <td>-0.166297</td>\n",
              "      <td>1.329220</td>\n",
              "      <td>0.924419</td>\n",
              "      <td>-2.564865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.478456</td>\n",
              "      <td>-0.133964</td>\n",
              "      <td>-0.688795</td>\n",
              "      <td>-0.203151</td>\n",
              "      <td>0.972589</td>\n",
              "      <td>0.681722</td>\n",
              "      <td>0.001036</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.489981</td>\n",
              "      <td>-0.037802</td>\n",
              "      <td>-0.688795</td>\n",
              "      <td>-0.184464</td>\n",
              "      <td>1.001901</td>\n",
              "      <td>0.778483</td>\n",
              "      <td>-2.563930</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.443879</td>\n",
              "      <td>-0.037802</td>\n",
              "      <td>-0.650202</td>\n",
              "      <td>-0.147611</td>\n",
              "      <td>1.061502</td>\n",
              "      <td>0.778483</td>\n",
              "      <td>-2.894019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.397776</td>\n",
              "      <td>0.058359</td>\n",
              "      <td>-0.643679</td>\n",
              "      <td>-0.110757</td>\n",
              "      <td>1.240306</td>\n",
              "      <td>0.924419</td>\n",
              "      <td>-0.722728</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc7b7dfd-172f-4e21-b404-92d06ec39f63')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fc7b7dfd-172f-4e21-b404-92d06ec39f63 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fc7b7dfd-172f-4e21-b404-92d06ec39f63');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8d8dbcfc-070f-42f7-9028-9186ef8406d6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d8dbcfc-070f-42f7-9028-9186ef8406d6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8d8dbcfc-070f-42f7-9028-9186ef8406d6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 17419,\n  \"fields\": [\n    {\n      \"column\": \"HUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2158582462470913,\n        \"min\": -5.271573922757991,\n        \"max\": 2.7017607293665415,\n        \"num_unique_values\": 613,\n        \"samples\": [\n          -2.782895850124243,\n          0.051723736345194525,\n          0.0861286006845617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"HULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9771188953547638,\n        \"min\": -3.2422391734734957,\n        \"max\": 3.8718213076329513,\n        \"num_unique_values\": 200,\n        \"samples\": [\n          -0.678402631275588,\n          1.4046247467346764,\n          1.5964699616793718\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2370081516403892,\n        \"min\": -5.466224374650029,\n        \"max\": 2.221473641983209,\n        \"num_unique_values\": 1031,\n        \"samples\": [\n          0.27060408441032,\n          1.0497197857549632,\n          1.4552225144203617\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9391639715991745,\n        \"min\": -3.4675419635527924,\n        \"max\": 3.633767874673063,\n        \"num_unique_values\": 314,\n        \"samples\": [\n          -1.161861239310233,\n          0.7560789535429958,\n          -1.6601622957458204\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LUFL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1378052207631089,\n        \"min\": -3.8785630030247096,\n        \"max\": 5.58533598804585,\n        \"num_unique_values\": 236,\n        \"samples\": [\n          2.7576956950283944,\n          -1.318639905417823,\n          3.4719337271773414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LULL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9510498992941407,\n        \"min\": -3.425084724705242,\n        \"max\": 3.581390700137447,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          -1.7817275248878084,\n          1.7445108298840784,\n          -1.2979206331103685\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"OT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8586147221249885,\n        \"min\": -9.274171808972909,\n        \"max\": 7.4341064725704635,\n        \"num_unique_values\": 2846,\n        \"samples\": [\n          0.7238641480289938,\n          -4.3406081847269835,\n          1.7767809878321266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Create time series data"
      ],
      "metadata": {
        "id": "7cB0hGkvfZZm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#sequence_length=5 days prior (120 hours)\n",
        "sequence_length = 48\n",
        "batch_size = 256\n",
        "#We want to forecast 96 hours into the future\n",
        "horizon= 96\n",
        "\n",
        "# delay is where the index for y should start\n",
        "delay=sequence_length+horizon-1\n",
        "\n",
        "train_dataset = keras.preprocessing.timeseries_dataset_from_array(\n",
        "  data=df[:-delay], #remove the last observations from the dataframe that will not have a time series predictor\n",
        "  targets=df['OT'][delay:],\n",
        "  sequence_length=sequence_length,\n",
        "  batch_size=batch_size,\n",
        "  start_index=0,\n",
        "  end_index=num_train_samples)\n",
        "\n",
        "\n",
        "val_dataset = keras.preprocessing.timeseries_dataset_from_array(\n",
        "  data=df[:-delay], #remove the last observations from the dataframe that will not have a time series predictor\n",
        "  targets=df['OT'][delay:],\n",
        "  sequence_length=sequence_length,\n",
        "  batch_size=batch_size,\n",
        "  start_index=num_train_samples,\n",
        "  end_index=num_train_samples + num_val_samples)\n",
        "\n",
        "\n",
        "test_dataset = keras.preprocessing.timeseries_dataset_from_array(\n",
        "  data=df[:-delay].to_numpy(), #remove the last observations from the dataframe that will not have a time series predictor\n",
        "  targets=df['OT'][delay:],\n",
        "  sequence_length=sequence_length,\n",
        "  batch_size=batch_size,\n",
        "  start_index=num_train_samples + num_val_samples)"
      ],
      "metadata": {
        "id": "FuBWciFDfAAg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. A Commonsense Baseline Model"
      ],
      "metadata": {
        "id": "h7znzw-GgyXf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#un-normalize the predictions and targets, to convert them back to celsius so we can interpret the error.\n",
        "#To un_normalize, reverse the normalization process, that is, multiply by train_std and add train_mean\n",
        "def unnormalize(preds, targets, mean, std):\n",
        "   preds=preds* std + mean\n",
        "   targets= targets*std+mean\n",
        "   return preds, targets\n",
        "\n",
        "def evaluate_model(dataset, model=None):\n",
        "  total_abs_err = 0.\n",
        "  num_sequences = 0\n",
        "  # the index of the oil temperature (OT) variable in the data. OT is the seventh column in df so its index is 6.\n",
        "  temp_index=6\n",
        "  for samples, targets in dataset:\n",
        "\n",
        "    #if model is None, use commonsense baseline, that is predict the target to be its last measurement in the input sequence\n",
        "    if model==None:\n",
        "      #for each sequence in the batch predict the target to be samples[:, -1, temp_index] which is is the last temperature measurement in the input sequence\n",
        "      #index -1 in samples[:, -1, temp_index] means the last time step in the sequence\n",
        "      preds = samples[:, -1, temp_index]\n",
        "\n",
        "    #if model is not None, get its predictions\n",
        "    else:\n",
        "      preds= model.predict(samples, verbose=0).flatten()\n",
        "\n",
        "    preds, targets=unnormalize(preds, targets, train_mean.iloc[temp_index], train_std.iloc[temp_index])\n",
        "\n",
        "    # add the absolute difference between the predictions and targets to total_abs_err\n",
        "    total_abs_err += np.sum(np.abs(preds - targets))\n",
        "\n",
        "    # add the number of sequences in this batch to num_sequences\n",
        "    num_sequences += samples.shape[0]\n",
        "\n",
        "  #get the average absolute error\n",
        "  return total_abs_err / num_sequences\n",
        "\n",
        "\n",
        "print(f\"Validation MAE Baseline: {evaluate_model(val_dataset):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q9uZrzWXg3c8",
        "outputId": "9462bc09-a632-4861-9f23-9647c36c3803"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation MAE Baseline: 0.74\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The baseline predictions have a MAE of 2.63. So if you always assume that the temperature 48 hours from now will be the same as it is right now, you will be incorrect by 2.63 degrees.\n",
        "\n",
        "After differencing: Baseline MAE decreased to 0.74"
      ],
      "metadata": {
        "id": "Rnb2tmPpCMwZ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. LSTM and 1d Convolution Models"
      ],
      "metadata": {
        "id": "mKBMGfMmCe4-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#every sample in train/validation/test is a 2d tensor of shape (sequence_length, num_features)\n",
        "num_features=df.shape[-1]\n",
        "def build_lstm(sequence_length, num_features):\n",
        "  inputs = keras.Input(shape=(sequence_length, num_features))\n",
        "  x = layers.LSTM(16)(inputs)\n",
        "  outputs = layers.Dense(1)(x)\n",
        "  lstm_model = keras.Model(inputs, outputs)\n",
        "  return lstm_model\n",
        "\n",
        "lstm_model= build_lstm(sequence_length, num_features)\n",
        "\n",
        "# check point the model with lowest validation loss\n",
        "checkpoint= keras.callbacks.ModelCheckpoint(\"temp_lstm.keras\",save_best_only=True)\n",
        "\n",
        "#add a learning rate schedule to reduce the learning rate when validation loss plateaus\n",
        "rop= keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.1, patience=5)\n",
        "\n",
        "#stop trianing if validation loss does not imrove for 5 consecutive epochs\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, min_delta=1e-4, restore_best_weights=True)\n",
        "\n",
        "\n",
        "lstm_model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history = lstm_model.fit(train_dataset,\n",
        "          epochs=50,\n",
        "          validation_data=val_dataset,\n",
        "          callbacks=[checkpoint, early_stopping, rop])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vyMNeGx_CjDp",
        "outputId": "3fdf02de-4926-4553-8968-7b41885b16a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 88ms/step - loss: 1.0826 - mae: 0.7183 - val_loss: 0.5736 - val_mae: 0.4991 - learning_rate: 0.0010\n",
            "Epoch 2/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 118ms/step - loss: 1.0552 - mae: 0.7063 - val_loss: 0.5680 - val_mae: 0.4967 - learning_rate: 0.0010\n",
            "Epoch 3/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 70ms/step - loss: 1.0431 - mae: 0.7001 - val_loss: 0.5667 - val_mae: 0.4968 - learning_rate: 0.0010\n",
            "Epoch 4/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 67ms/step - loss: 1.0358 - mae: 0.6961 - val_loss: 0.5654 - val_mae: 0.4966 - learning_rate: 0.0010\n",
            "Epoch 5/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - loss: 1.0308 - mae: 0.6934 - val_loss: 0.5642 - val_mae: 0.4964 - learning_rate: 0.0010\n",
            "Epoch 6/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 83ms/step - loss: 1.0271 - mae: 0.6915 - val_loss: 0.5634 - val_mae: 0.4963 - learning_rate: 0.0010\n",
            "Epoch 7/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 116ms/step - loss: 1.0243 - mae: 0.6902 - val_loss: 0.5628 - val_mae: 0.4964 - learning_rate: 0.0010\n",
            "Epoch 8/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 69ms/step - loss: 1.0221 - mae: 0.6891 - val_loss: 0.5625 - val_mae: 0.4965 - learning_rate: 0.0010\n",
            "Epoch 9/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 69ms/step - loss: 1.0202 - mae: 0.6882 - val_loss: 0.5624 - val_mae: 0.4967 - learning_rate: 0.0010\n",
            "Epoch 10/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 70ms/step - loss: 1.0185 - mae: 0.6875 - val_loss: 0.5624 - val_mae: 0.4970 - learning_rate: 0.0010\n",
            "Epoch 11/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - loss: 1.0170 - mae: 0.6869 - val_loss: 0.5624 - val_mae: 0.4972 - learning_rate: 0.0010\n",
            "Epoch 12/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 125ms/step - loss: 1.0156 - mae: 0.6863 - val_loss: 0.5626 - val_mae: 0.4975 - learning_rate: 0.0010\n",
            "Epoch 13/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 66ms/step - loss: 1.0142 - mae: 0.6857 - val_loss: 0.5628 - val_mae: 0.4978 - learning_rate: 0.0010\n",
            "Epoch 14/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 68ms/step - loss: 1.0128 - mae: 0.6851 - val_loss: 0.5631 - val_mae: 0.4982 - learning_rate: 0.0010\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(lstm_model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        },
        "id": "y11bh_B8FxXP",
        "outputId": "e5a47f98-a61f-4438-8e2f-dbdd83e3526b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"functional\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer (\u001b[38;5;33mInputLayer\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m48\u001b[0m, \u001b[38;5;34m7\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm (\u001b[38;5;33mLSTM\u001b[0m)                          │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m)                  │           \u001b[38;5;34m1,536\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │              \u001b[38;5;34m17\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                          │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,536</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │              <span style=\"color: #00af00; text-decoration-color: #00af00\">17</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m3,108\u001b[0m (12.14 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">3,108</span> (12.14 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,553\u001b[0m (6.07 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,553</span> (6.07 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m1,555\u001b[0m (6.08 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,555</span> (6.08 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "epochs = range(1, len(loss) + 1)\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss recurrent baseline')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "gj0bv3s0FzFy",
        "outputId": "bf901839-b6a2-4d57-ae72-09d25e1e538e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# load the checkpointed model and compute its test MAE\n",
        "lstm_model = keras.models.load_model(\"temp_lstm.keras\")\n",
        "\n",
        "print(f\"Validation MAE lstm: {evaluate_model(val_dataset, model=lstm_model):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gdn2dqu8F-6g",
        "outputId": "9cb4b9cd-eb6c-4ee0-ce82-9f82451b455b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation MAE lstm: 0.53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The baseline LSTM resulted in an MAE of 4.39, which is two times higher than the commonsense baseline model. So far this baseline LSTM is not performing better and is overfitting. Perhaps after some tuning I can get it to perform at least as well as the commonsense baseline model.\n",
        "\n",
        "The stationary time series LSTM has an MAE of 0.53. This is an improvement to the commonsense baseline of 0.74."
      ],
      "metadata": {
        "id": "7XlHfpYzGOLg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Tuning to improve performance\n",
        "\n",
        "I will stack GRU layers, add a dense+dropout layer after the GRU layers but before the final layer."
      ],
      "metadata": {
        "id": "c55FX1C2G88M"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "num_features=df.shape[-1]\n",
        "early_stopping = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=5, min_delta=1e-4, restore_best_weights=True)\n",
        "\n",
        "def build_stacked_lstm(sequence_length, num_features):\n",
        "  inputs = keras.Input(shape=(sequence_length, num_features))\n",
        "  x = layers.GRU(32, return_sequences=True)(inputs)\n",
        "  x = layers.GRU(32)(x)\n",
        "  x = layers.Dropout(0.5)(x)\n",
        "  x = layers.Dense(16, activation=\"relu\")(x)\n",
        "  x = layers.Dropout(0.5)(x)\n",
        "  outputs = layers.Dense(1)(x)\n",
        "  model = keras.Model(inputs, outputs)\n",
        "  return model\n",
        "\n",
        "stacked_lstm_model= build_stacked_lstm(sequence_length, num_features)\n",
        "\n",
        "# check point the best model\n",
        "checkpoint= keras.callbacks.ModelCheckpoint(\"ot_stacked_lstm.keras\", save_best_only=True)\n",
        "\n",
        "stacked_lstm_model.compile(optimizer=keras.optimizers.AdamW(learning_rate=0.001,weight_decay=0.002), loss=\"mse\", metrics=[\"mae\"])\n",
        "history = stacked_lstm_model.fit(train_dataset,\n",
        "          epochs=50,\n",
        "          validation_data=val_dataset,\n",
        "          callbacks=[checkpoint, early_stopping, rop])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FeH8wfmMOIzP",
        "outputId": "4276d039-865d-4e45-9e61-57be8d1f6b73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 162ms/step - loss: 1.1389 - mae: 0.7470 - val_loss: 0.5661 - val_mae: 0.4942 - learning_rate: 0.0050\n",
            "Epoch 2/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 163ms/step - loss: 1.0628 - mae: 0.7072 - val_loss: 0.5623 - val_mae: 0.4918 - learning_rate: 0.0050\n",
            "Epoch 3/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 205ms/step - loss: 1.0563 - mae: 0.7020 - val_loss: 0.5592 - val_mae: 0.4902 - learning_rate: 0.0050\n",
            "Epoch 4/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 146ms/step - loss: 1.0470 - mae: 0.6984 - val_loss: 0.5577 - val_mae: 0.4894 - learning_rate: 0.0050\n",
            "Epoch 5/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 238ms/step - loss: 1.0439 - mae: 0.6997 - val_loss: 0.5544 - val_mae: 0.4871 - learning_rate: 0.0050\n",
            "Epoch 6/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 139ms/step - loss: 1.0423 - mae: 0.7005 - val_loss: 0.5532 - val_mae: 0.4858 - learning_rate: 0.0050\n",
            "Epoch 7/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 152ms/step - loss: 1.0353 - mae: 0.6954 - val_loss: 0.5561 - val_mae: 0.4875 - learning_rate: 0.0050\n",
            "Epoch 8/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 140ms/step - loss: 1.0399 - mae: 0.6971 - val_loss: 0.5516 - val_mae: 0.4880 - learning_rate: 0.0050\n",
            "Epoch 9/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 196ms/step - loss: 1.0323 - mae: 0.6980 - val_loss: 0.5497 - val_mae: 0.4856 - learning_rate: 0.0050\n",
            "Epoch 10/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 140ms/step - loss: 1.0308 - mae: 0.6945 - val_loss: 0.5510 - val_mae: 0.4839 - learning_rate: 0.0050\n",
            "Epoch 11/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 181ms/step - loss: 1.0304 - mae: 0.6914 - val_loss: 0.5496 - val_mae: 0.4842 - learning_rate: 0.0050\n",
            "Epoch 12/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 165ms/step - loss: 1.0265 - mae: 0.6894 - val_loss: 0.5493 - val_mae: 0.4849 - learning_rate: 0.0050\n",
            "Epoch 13/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 142ms/step - loss: 1.0272 - mae: 0.6912 - val_loss: 0.5502 - val_mae: 0.4845 - learning_rate: 0.0050\n",
            "Epoch 14/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 241ms/step - loss: 1.0240 - mae: 0.6891 - val_loss: 0.5487 - val_mae: 0.4824 - learning_rate: 0.0050\n",
            "Epoch 15/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 146ms/step - loss: 1.0297 - mae: 0.6913 - val_loss: 0.5482 - val_mae: 0.4840 - learning_rate: 0.0050\n",
            "Epoch 16/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 149ms/step - loss: 1.0158 - mae: 0.6883 - val_loss: 0.5490 - val_mae: 0.4842 - learning_rate: 0.0050\n",
            "Epoch 17/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 187ms/step - loss: 1.0199 - mae: 0.6889 - val_loss: 0.5457 - val_mae: 0.4840 - learning_rate: 0.0050\n",
            "Epoch 18/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 137ms/step - loss: 1.0195 - mae: 0.6862 - val_loss: 0.5487 - val_mae: 0.4860 - learning_rate: 0.0050\n",
            "Epoch 19/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 218ms/step - loss: 1.0159 - mae: 0.6882 - val_loss: 0.5545 - val_mae: 0.4861 - learning_rate: 0.0050\n",
            "Epoch 20/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 151ms/step - loss: 1.0121 - mae: 0.6858 - val_loss: 0.5480 - val_mae: 0.4850 - learning_rate: 0.0050\n",
            "Epoch 21/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 205ms/step - loss: 1.0122 - mae: 0.6849 - val_loss: 0.5497 - val_mae: 0.4833 - learning_rate: 0.0050\n",
            "Epoch 22/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 141ms/step - loss: 1.0077 - mae: 0.6818 - val_loss: 0.5498 - val_mae: 0.4880 - learning_rate: 0.0050\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "epochs = range(1, len(loss) + 1)\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "XtQg8w2jO_lI",
        "outputId": "5b66e510-2ecd-48d1-cb2d-328c0ab70044"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# load the checkpointed model and compute its test MAE\n",
        "stacked_lstm_model = keras.models.load_model(\"ot_stacked_lstm.keras\")\n",
        "\n",
        "print(f\"Validation MAE Stacked lstm w/ GRU layers: {evaluate_model(val_dataset, model=stacked_lstm_model):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PNVQ1cPtPCA2",
        "outputId": "7b504817-c10c-4f4f-b2a8-a3d461c384d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation MAE Stacked lstm w/ GRU layers: 0.52\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Increasing the capacity: stacked GRU layer + dense + dropout layer**\n",
        "\n",
        "The MAE on the validation data has decreased ever so slightly from 4.57 to 4.48 with the additional capacity. The model has improved very well as far as *not* overfitting now.\n",
        "\n",
        "**Tune the sequence_length parameter in the time series creation**\n",
        "\n",
        "sequence_length = 48 --> MAE: 4.27\n",
        "\n",
        "sequence_length = 96 --> MAE: 4.81\n",
        "\n",
        "sequence_length = 120 --> MAE: 4.48\n",
        "\n",
        "sequence_length = 336 --> MAE: 4.47\n",
        "\n",
        "**Using AdamW and adjusting initial learning rate**\n",
        "\n",
        "Adding AdamW and specifying the initial learning rate did lead to a significant improvement in the validation MAE (3.87). However the graph of the losses is wild, with a lot of flucuation and very early stopping.\n",
        "\n",
        "\n",
        "\n",
        "**Selected hyperparameters**\n",
        "\n",
        "Using the following hyperparameters, I was able to get the MAE down to 3.76.\n",
        "\n",
        "Initial learning rate: 0.005\n",
        "\n",
        "Learning rate decay rate: 0.2\n",
        "\n",
        "LR decay Patience: 3\n",
        "\n",
        "sequence_length: 48\n",
        "\n",
        "Adam weight decay: 0.002\n",
        "\n",
        "epochs: 50\n",
        "\n",
        "Neurons: 32 GRU, 32 GRU, Dropout (0.5), 16 Dense, Dropout (0.5)\n",
        "\n"
      ],
      "metadata": {
        "id": "371KMqqOPspd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1d convolution model"
      ],
      "metadata": {
        "id": "WyWey0zOPSmR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def build_1dconv(sequence_length, num_features):\n",
        "  inputs = keras.Input(shape=(sequence_length, num_features))  #shape (48, 7)\n",
        "\n",
        "  # a 1D convolutional layer with 8 filters and a kernel/window of size 12\n",
        "  x = layers.Conv1D(8, 12, activation=\"relu\")(inputs)\n",
        "  x = layers.MaxPooling1D(2, padding='same')(x)\n",
        "\n",
        "  # a 1D convolutional layer with 8 filters and a kernel of size 4\n",
        "  x = layers.Conv1D(8, 7, activation=\"relu\")(x)\n",
        "  x = layers.MaxPooling1D(2, padding='same')(x)\n",
        "\n",
        "  # a 1D convolutional layer with 8 filters and a kernel of size 4\n",
        "  x = layers.Conv1D(8, 4, activation=\"relu\")(x)\n",
        "\n",
        "  # a global average pooling layer that takes the global average along the temporal dimension\n",
        "  x = layers.GlobalAveragePooling1D()(x)\n",
        "  outputs = layers.Dense(1)(x)\n",
        "  model = keras.Model(inputs, outputs)\n",
        "  return model\n",
        "\n",
        "conv1D_model= build_1dconv(sequence_length, num_features)\n",
        "\n",
        "conv1D_model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "JLw9EQgVPXQS",
        "outputId": "a929729f-0d03-4eb8-d08a-ff9ff26d9ad4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"functional_2\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional_2\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_2 (\u001b[38;5;33mInputLayer\u001b[0m)           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m48\u001b[0m, \u001b[38;5;34m7\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d (\u001b[38;5;33mConv1D\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m37\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │             \u001b[38;5;34m680\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling1d (\u001b[38;5;33mMaxPooling1D\u001b[0m)         │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m19\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d_1 (\u001b[38;5;33mConv1D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m8\u001b[0m)               │             \u001b[38;5;34m456\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling1d_1 (\u001b[38;5;33mMaxPooling1D\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m8\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d_2 (\u001b[38;5;33mConv1D\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m4\u001b[0m, \u001b[38;5;34m8\u001b[0m)                │             \u001b[38;5;34m264\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling1d             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m8\u001b[0m)                   │               \u001b[38;5;34m0\u001b[0m │\n",
              "│ (\u001b[38;5;33mGlobalAveragePooling1D\u001b[0m)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_3 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)                   │               \u001b[38;5;34m9\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">48</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">37</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │             <span style=\"color: #00af00; text-decoration-color: #00af00\">680</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling1d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling1D</span>)         │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">19</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)               │             <span style=\"color: #00af00; text-decoration-color: #00af00\">456</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ max_pooling1d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling1D</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ conv1d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv1D</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                │             <span style=\"color: #00af00; text-decoration-color: #00af00\">264</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling1d             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">8</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                   │               <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m1,409\u001b[0m (5.50 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,409</span> (5.50 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,409\u001b[0m (5.50 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,409</span> (5.50 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# check point the best model\n",
        "checkpoint= keras.callbacks.ModelCheckpoint(\"ot_conv1d.keras\",save_best_only=True)\n",
        "conv1D_model.compile(optimizer=\"rmsprop\", loss=\"mse\", metrics=[\"mae\"])\n",
        "history = conv1D_model.fit(train_dataset,\n",
        "epochs=50,\n",
        "validation_data=val_dataset,\n",
        "callbacks=[checkpoint, rop])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2BelJmAqPeSq",
        "outputId": "9ec53aa7-e05c-4f01-b698-06f6e288b7e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 86ms/step - loss: 1.1675 - mae: 0.7564 - val_loss: 0.5724 - val_mae: 0.5000 - learning_rate: 0.0010\n",
            "Epoch 2/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step - loss: 1.0577 - mae: 0.7049 - val_loss: 0.5722 - val_mae: 0.5047 - learning_rate: 0.0010\n",
            "Epoch 3/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0465 - mae: 0.6996 - val_loss: 0.5736 - val_mae: 0.5064 - learning_rate: 0.0010\n",
            "Epoch 4/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 1.0378 - mae: 0.6956 - val_loss: 0.5722 - val_mae: 0.5056 - learning_rate: 0.0010\n",
            "Epoch 5/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 88ms/step - loss: 1.0297 - mae: 0.6929 - val_loss: 0.5735 - val_mae: 0.5066 - learning_rate: 0.0010\n",
            "Epoch 6/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step - loss: 1.0257 - mae: 0.6914 - val_loss: 0.5721 - val_mae: 0.5059 - learning_rate: 0.0010\n",
            "Epoch 7/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0202 - mae: 0.6895 - val_loss: 0.5740 - val_mae: 0.5071 - learning_rate: 0.0010\n",
            "Epoch 8/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0147 - mae: 0.6866 - val_loss: 0.5731 - val_mae: 0.5069 - learning_rate: 2.0000e-04\n",
            "Epoch 9/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0131 - mae: 0.6861 - val_loss: 0.5729 - val_mae: 0.5069 - learning_rate: 2.0000e-04\n",
            "Epoch 10/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 1.0119 - mae: 0.6857 - val_loss: 0.5728 - val_mae: 0.5070 - learning_rate: 2.0000e-04\n",
            "Epoch 11/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 99ms/step - loss: 1.0109 - mae: 0.6855 - val_loss: 0.5729 - val_mae: 0.5071 - learning_rate: 2.0000e-04\n",
            "Epoch 12/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step - loss: 1.0100 - mae: 0.6852 - val_loss: 0.5728 - val_mae: 0.5074 - learning_rate: 2.0000e-04\n",
            "Epoch 13/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 1.0087 - mae: 0.6846 - val_loss: 0.5728 - val_mae: 0.5074 - learning_rate: 4.0000e-05\n",
            "Epoch 14/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0084 - mae: 0.6846 - val_loss: 0.5728 - val_mae: 0.5075 - learning_rate: 4.0000e-05\n",
            "Epoch 15/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0082 - mae: 0.6845 - val_loss: 0.5729 - val_mae: 0.5076 - learning_rate: 4.0000e-05\n",
            "Epoch 16/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 76ms/step - loss: 1.0080 - mae: 0.6845 - val_loss: 0.5729 - val_mae: 0.5076 - learning_rate: 4.0000e-05\n",
            "Epoch 17/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step - loss: 1.0079 - mae: 0.6844 - val_loss: 0.5729 - val_mae: 0.5077 - learning_rate: 4.0000e-05\n",
            "Epoch 18/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0076 - mae: 0.6843 - val_loss: 0.5729 - val_mae: 0.5077 - learning_rate: 8.0000e-06\n",
            "Epoch 19/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 75ms/step - loss: 1.0076 - mae: 0.6843 - val_loss: 0.5729 - val_mae: 0.5077 - learning_rate: 8.0000e-06\n",
            "Epoch 20/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0075 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 8.0000e-06\n",
            "Epoch 21/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 63ms/step - loss: 1.0075 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 8.0000e-06\n",
            "Epoch 22/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 99ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 8.0000e-06\n",
            "Epoch 23/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.6000e-06\n",
            "Epoch 24/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.6000e-06\n",
            "Epoch 25/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 75ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.6000e-06\n",
            "Epoch 26/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 58ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.6000e-06\n",
            "Epoch 27/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.6000e-06\n",
            "Epoch 28/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 98ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 3.2000e-07\n",
            "Epoch 29/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 54ms/step - loss: 1.0074 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 3.2000e-07\n",
            "Epoch 30/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 3.2000e-07\n",
            "Epoch 31/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 3.2000e-07\n",
            "Epoch 32/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 3.2000e-07\n",
            "Epoch 33/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 71ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 6.4000e-08\n",
            "Epoch 34/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 96ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 6.4000e-08\n",
            "Epoch 35/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 6.4000e-08\n",
            "Epoch 36/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 6.4000e-08\n",
            "Epoch 37/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 55ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 6.4000e-08\n",
            "Epoch 38/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.2800e-08\n",
            "Epoch 39/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.2800e-08\n",
            "Epoch 40/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 73ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.2800e-08\n",
            "Epoch 41/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 107ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.2800e-08\n",
            "Epoch 42/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 52ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 1.2800e-08\n",
            "Epoch 43/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 2.5600e-09\n",
            "Epoch 44/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 52ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 2.5600e-09\n",
            "Epoch 45/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 54ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 2.5600e-09\n",
            "Epoch 46/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 56ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 2.5600e-09\n",
            "Epoch 47/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 84ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 2.5600e-09\n",
            "Epoch 48/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 5.1200e-10\n",
            "Epoch 49/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 5.1200e-10\n",
            "Epoch 50/50\n",
            "\u001b[1m34/34\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 53ms/step - loss: 1.0073 - mae: 0.6843 - val_loss: 0.5730 - val_mae: 0.5078 - learning_rate: 5.1200e-10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "epochs = range(1, len(loss) + 1)\n",
        "plt.figure()\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "DFTQiq8rPiGz",
        "outputId": "5e516a84-44e0-432e-8342-bbb5d4a472c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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3LlYvnw5Tp06hZiYGOzYsQOffPJJhcecNm0aMjMzpeXq1auVWDERERHJjV5HWGxsbGBoaIi0tDSt9rS0NNjZ2ZW4zsyZM/H222/j3XffBQC0a9cOOTk5GDVqFKZPn16hMZVKJZRKpT6lExERUS2m1xEWExMTeHl5aU2g1Wg0iIuLg4+PT4nr5ObmwsBAezOGhoYAACFEhcYkIiKi+kWvIywAEBISgqCgIHTs2BGdO3dGREQEcnJyEBwcDAAYNmwYHB0dER4eDgAICAjAwoUL0aFDB3h7eyMxMREzZ85EQECAFFzKG5OIiIjqN70DS2BgIG7fvo3Q0FCkpqaiffv2iI2NlSbNpqSkaB1RmTFjBhQKBWbMmIHr16/D1tYWAQEB+Oyzz3Qek4iIiOo3ve/DIke8DwsREVHtU2X3YSEiIiKqCQwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsMLERERCR7DCxEREQkewwsREREJHsVCizLli2Dq6srTE1N4e3tjePHj5fat0ePHlAoFMWWV155ReozfPjwYs/36tWrIqURERFRHWSk7wrR0dEICQlBZGQkvL29ERERAX9/fyQkJKBJkybF+sfExCA/P196fOfOHXh6emLgwIFa/Xr16oU1a9ZIj5VKpb6lERERUR2l9xGWhQsXYuTIkQgODkabNm0QGRkJc3NzrF69usT+zzzzDOzs7KRlz549MDc3LxZYlEqlVr9GjRpV7BURERFRnaNXYMnPz8fJkyfh5+f3aAADA/j5+eHIkSM6jbFq1SoMGjQIDRo00Grft28fmjRpgpYtW2L06NG4c+dOqWPk5eUhKytLayEiIqK6S6/Akp6eDrVaDZVKpdWuUqmQmppa7vrHjx/HuXPn8O6772q19+rVC9988w3i4uLwn//8B/v370fv3r2hVqtLHCc8PBxWVlbS4uzsrM/LICIiolpG7zksT2PVqlVo164d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c5g7dy7UarVWv4sXL8LBwQFubm4YMmQIUlJSSq0jLy8PWVlZWgsRERHVXXoFlvT0dKjVaqhUKq12lUqF1NTUEte5fPkyNm/eDLVajZ07d2LmzJlYsGABPv30U6mPt7c3oqKiEBsbixUrViApKQndunXDvXv3ShwzPDwcVlZW0uLs7KzPyyAiIqJapsonimg0GjRp0gRff/01DA0N4eXlhevXr2P+/PmYNWsWAKB3795Sfw8PD3h7e8PFxQUbN27EiBEjio05bdo0hISESI+zsrIYWoiIiOowvQKLjY0NDA0NkZaWptWelpZW6vwTe3t7GBsbw9DQUGpr3bo1UlNTkZ+fDxMTk2LrWFtbo0WLFkhMTCxxTKVSCaVSqU/pREREVIvpdUrIxMQEXl5eiIuLk9o0Gg3i4uLg4+NT4jq+vr5ITEyERqOR2i5cuAB7e/sSwwoAZGdn49KlS7C3t9enPCIiIqqj9L4PS0hICFauXIm1a9fi/PnzGD16NHJycqSrhoYNG4Zp06ZJ/UePHo27d+9iwoQJuHDhAnbs2IG5c+dizJgxUp/Jkydj//79SE5OxuHDh9G/f38YGhpi8ODBlfASiYiIqLbTew5LYGAgbt++jdDQUKSmpqJ9+/aIjY2VJuKmpKTAwOBRDnJ2dsbPP/+MSZMmwcPDA46OjpgwYQKmTJki9bl27RoGDx6MO3fuwNbWFl27dsXRo0dha2tbCS+RiIiIajuFEELUdBFPKysrC1ZWVsjMzISlpWVNl0NEREQ60Ofzm98lRERERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyx8BCREREssfAQkRERLLHwEJERESyV6HAsmzZMri6usLU1BTe3t44fvx4mf0zMjIwZswY2NvbQ6lUokWLFti5c+dTjUlERET1h96BJTo6GiEhIZg1axZOnToFT09P+Pv749atWyX2z8/Px0svvYTk5GRs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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# load the checkpointed model and compute its test MAE\n",
        "conv1D_model = keras.models.load_model(\"ot_conv1d.keras\")\n",
        "\n",
        "print(f\"Validation MAE ConvNet 1D: {evaluate_model(val_dataset, model=conv1D_model):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2nqT7GT7PjwM",
        "outputId": "45d55a36-9050-483a-a3c3-8959341a49c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Validation MAE ConvNet 1D: 0.54\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Time series:\n",
        "\n",
        "The 1D conv net was able to achieve an MAE of 4.33. The stacked GRU model performed the best thus far with an MAE of 3.76.\n",
        "\n",
        "Stationary time series:\n",
        "\n",
        "The 1D conv net had an average error (MAE) of 0.54."
      ],
      "metadata": {
        "id": "WdJ9MWKa3BAF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Feature Engineering - Making the Time Series Stationary"
      ],
      "metadata": {
        "id": "29JAJtth3DtL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "After implementing differencing (making the time series stationary), the MAE values are:\n",
        "\n",
        "Baseline: 0.74\n",
        "\n",
        "LSTM model: 0.53\n",
        "\n",
        "Stacked GRU: 0.52\n",
        "\n",
        "1D Convolutional network: 0.54\n",
        "\n",
        "This indicates that the average error between prediction and actual value is around 0.5 for the neural networks, which is a tremendous improvement from the non-stationary time series error rate. The neural network models outperform the commonsense baseline model and thus prove their value in this instance."
      ],
      "metadata": {
        "id": "q6kvQx30-Ocj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Performance on the test set"
      ],
      "metadata": {
        "id": "mMY4HKTi34JV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "The stacked LSTM with GRU layers performed the best on the validation data (MAE of 0.52), thus I will use the checkpointed stacked_lstm model on the test dataset to gather its predictions."
      ],
      "metadata": {
        "id": "4WcYz7Oe-9uT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# load the checkpointed GRU model and compute its test MAE\n",
        "best_model = keras.models.load_model(\"ot_stacked_lstm.keras\")\n",
        "\n",
        "print(f\"test MAE for best model: {evaluate_model(test_dataset, model = best_model):.2f}\")\n",
        "print(f\"test MAE for commonsense model: {evaluate_model(test_dataset):.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uKmEpDWl6TG6",
        "outputId": "25badbb1-4f14-479c-db9a-49d970773594"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "test MAE for best model: 0.44\n",
            "test MAE for commonsense model: 0.62\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "preds = best_model.predict(test_dataset, verbose=0).flatten()\n",
        "\n",
        "#the following line was slightly adapted from https://stackoverflow.com/questions/56226621/how-to-extract-data-labels-back-from-tensorflow-dataset\n",
        "targets = np.concatenate([targets for inputs, targets in test_dataset], axis=0)\n",
        "print(preds.shape)\n",
        "print(targets.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LdDtIo0z4QbH",
        "outputId": "f4539651-a67c-416c-9158-519a5508c892"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(4269,)\n",
            "(4269,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plot the predicted vs true values for the test set\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2)  # 1 row, 2 columns\n",
        "fig.suptitle('Predicted vs True')\n",
        "ax1.plot(preds, 'ro', label='Predicted')\n",
        "ax1.set_title('Predicted')\n",
        "ax2.plot(targets, 'bo', label='True')\n",
        "ax2.set_title('True')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 478
        },
        "id": "zJ9eFUsBAOJc",
        "outputId": "5bca13c0-80f4-4fe7-accd-18eafaac755c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The graph certainly demonstrates the level of error that the model routinely predicts. The predicted values are less dense around 0 compared to the true values and are more spread out along the y axis. Regardless, the overall mean absolute error of 0.44 is pretty good and beats the baseline model (0.62)."
      ],
      "metadata": {
        "id": "JFNQDr9Weu6t"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
